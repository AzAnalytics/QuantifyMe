# app/pages/3_Inscription.py
# -*- coding: utf-8 -*-

# --- bootstrap import path (pages Streamlit) ---
import os, sys
ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)
# ------------------------------------------------

import pandas as pd
import streamlit as st

from app.persistence.db import init_db
from app.persistence.models import Base
from app.persistence.repositories.users_repo import UserRepository

# DB ready
init_db(Base, drop_and_recreate=False)
users = UserRepository()

st.set_page_config(page_title="Inscription / Premium ‚Äî QuantifyMe", page_icon="‚≠ê", layout="centered")
st.title("‚≠ê Devenir Premium")

# R√©cup√©ration utilisateur courant (depuis la session), fallback si besoin
default_email = "demo@example.com"
if "user_id" not in st.session_state or "user_email" not in st.session_state:
    u = users.get_or_create(default_email, is_premium=False)
    st.session_state["user_id"] = u.id
    st.session_state["user_email"] = u.email

user_id = st.session_state["user_id"]
user_email = st.session_state["user_email"]
u = users.get_by_email(user_email)

st.caption(f"Connect√© en tant que **{user_email}** (id={user_id})")

# --- Hero / pitch ---
st.markdown(
    """
    Boostez votre **clart√© mentale** et vos **r√©sultats** avec **QuantifyMe Premium**.  
    Acc√©dez √† des analyses avanc√©es, √† des recommandations intelligentes (IA) et √† des comparaisons de p√©riodes automatiques.
    """
)

# --- Tableau des avantages ---
features = [
    ("Journal quotidien illimit√©", True, True),
    ("Graphiques par jour (Altair)", True, True),
    ("Comparaison de p√©riodes (A vs B)", False, True),
    ("Interpr√©tations IA personnalis√©es", False, True),
    ("Moyenne glissante et tendances avanc√©es", False, True),
    ("Export CSV / future API d‚Äôexport", False, True),
    ("Support prioritaire", False, True),
]
df = pd.DataFrame(features, columns=["Fonctionnalit√©", "Gratuit", "Premium"])
df["Gratuit"] = df["Gratuit"].map(lambda x: "‚úÖ" if x else "‚Äî")
df["Premium"] = df["Premium"].map(lambda x: "‚úÖ" if x else "‚Äî")

st.subheader("üì¶ Avantages")
st.table(df)

# --- Tarifs (exemple / placeholder) ---
colA, colB = st.columns(2)
with colA:
    st.markdown(
        """
        ### Gratuit
        - 0‚Ç¨/mois
        - Journal + graphiques de base
        - Donn√©es locales
        """
    )
with colB:
    st.markdown(
        """
        ### Premium
        - **7‚Ç¨/mois** (exemple)
        - IA, comparaisons, export, support
        - Mises √† jour en priorit√©
        """
    )

st.divider()

# --- CTA / Abonnement ---
if u.is_premium:
    st.success("üéâ Vous √™tes d√©j√† **Premium**. Merci pour votre soutien !")
else:
    st.info("Passez √† **Premium** pour d√©bloquer les fonctionnalit√©s avanc√©es.")
    # Dans un vrai flux, ici on redirigerait vers un checkout (Stripe/Paypal).
    # Pour le MVP : on bascule directement le statut.
    if st.button("S‚Äôabonner maintenant"):
        try:
            users.set_premium(user_email, True)
            st.success("‚úÖ Abonnement activ√©. Vous √™tes maintenant **Premium**.")
            # met √† jour l'√©tat local et rafra√Æchit la page
            st.session_state["premium"] = True
            st.rerun()
        except Exception as e:
            st.error(f"Impossible d‚Äôactiver l‚Äôabonnement : {e}")

st.caption("üí° Astuce : vous pouvez √† tout moment revenir sur le **Profil** pour v√©rifier votre statut.")
